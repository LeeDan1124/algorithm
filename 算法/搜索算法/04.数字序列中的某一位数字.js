/**
 * 数字以 0123456789101112131415... 的格式作为一个字符序列，在这个序列中第 2 位（从下标 0 开始计算）是 2 ，第 10 位是 1 ，
 * 第 13 位是 1 ，以此类题，请你输出第 n 位对应的数字。
 * 
 * 1-9          9个数       9位 * 1 * 20 * 300  * 4000
 * 10-99        90个数      180位   
 * 100-999      900个数     2700位
 * 1000-9999    9000个数    36000位
 * ……
 * 2700 - 9 = 2691 - 180 = 2511
 * 2511 / 3 = 837  100-999的第837个数字后的末尾
 * 99 + 837 = 936 --> 6
 * 
 * 
 * 2699 - 9 = 2690 - 180 = 2510
 * 2510 / 3 = 836……2  100-999的第836个数字后的第二位数字
 * 99 + 836 = 935 936 --> 3
 * 
 * 
 * 13 - 9 = 4
 * 4 / 2 = 2 10-99的第二个数字的末尾数字
 * 9 + 2 = 11 --> 1
 */
/**
 * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
 * @param n int整型 
 * @return int整型
 */
function findNthDigit( n ) {
    // write code here

}
//01234567891011121314151617
console.log(findNthDigit(2699))
module.exports = {
    findNthDigit : findNthDigit
};