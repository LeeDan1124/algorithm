/**
 * 输入一个整数 n ，求 1～n 这 n 个整数的十进制表示中 1 出现的次数
例如， 1~13 中包含 1 的数字有 1 、 10 、 11 、 12 、 13 因此共出现 6 次
注意：11 这种情况算两次
数据范围： 1 \le n \le 30000 \1≤n≤30000 
进阶：空间复杂度 O(1)，时间复杂度 O(lognn)

13  13 / 10 = 1 …… 3  1+1+3+1
23  23 / 10 = 2 …… 3  1+10+1+1



1-9   1
// 10-99之间的规律：1+10*(n-1)
n的范围
10-19 1-9个数+10    1+10
20-29 1-9个数       1+10+1 
30-39 1-9个数       1+10+1+1
40-49 1-9个数       1+10+1+1+1
50-59 1-9个数       1+10+1+1+1+1 
60-69 1-9个数
70-79 1-9个数
80-89 1-9个数
90-99 1-9个数
……
// 100-999规律： 
100-199  1-99个数+100  1+10*(n-1)+100*(m-1)  n是十位 m是百位
200-299  1-99个数
300-399  1-99个数
……
900-999  1-99个数

1000-1999  1-999个数+1000
2000-2999  1-999个数
……

 */

function NumberOf1Between1AndN_Solution(n)
{
    // write code here
}
module.exports = {
    NumberOf1Between1AndN_Solution : NumberOf1Between1AndN_Solution
};